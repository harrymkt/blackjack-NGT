/*savedata class.
this class provides saving and loading data, probably used on games to save the progress.
this class supports multiple save types.
by default, the savedata_def type is used.
it is however not advised to use INI for saving many data, for example in game messages, because INI is used new line and = seperater.
*/
enum savedatatypes
{
savedata_def=0,
savedata_ini
}
class savedata
{
//internal variables for the class.
string key;
string fn;
dictionary d;
private int type=savedata_def;
//the constructor
savedata(string filename, string enckey="", int tt=savedata_def)
{
fn=filename;
key=enckey;
this.type=tt;
}
//the function to load the saved data into the dictionary.
void load()
{
file f;
//fn is our previously declared filename string, so use that.
f.open(fn,"r");
d=loaddict(f.read(f.get_size()));
//close the file
f.close();
}
//function to save the data into the file.
void save()
{
file f;
//again, use the FN string
f.open(fn,"w");
f.write(savedict(d));
}
//function to add a value.
void add(string name, double value)
{
d.set(name,value);
}
//function to read a number.
double readn(string name)
{
if(this.type==savedata_ini) return string_to_number(this.read(name));
double tmp;
d.get(name,tmp);
return tmp;
}
//overloaded function of add to add a string.
void add(string name, string value)
{
d.set(name,value);
}
//function to read a string
string read(string name)
{
string tmp;
d.get(name,tmp);
return tmp;
}
bool exists(string k)
{
return this.d.exists(k);
}
void clear()
{
this.d.delete_all();
}
private dictionary loaddict(string data)
{
//this function loads the data to the dictionary.
if(this.key!="") data=string_decrypt(data,this.key);
dictionary d;
if(this.type==savedata_ini) d=this.inidict(data);
else if(this.type==savedata_def) d=deserialize(data);
return d;
}
private string savedict(dictionary@ d)
{
string fa;
if(this.type==savedata_ini) fa=this.dictini(d);
else if(this.type==savedata_def) fa=serialize(d);
if(this.key!="") fa=string_encrypt(fa,this.key);
return fa;
}
private dictionary inidict(string data)
{
dictionary d;
string[] lines=data.split("\r\n");
if(lines.length()<1) return d;
for(uint i=0;i<lines.length();i++)
{
int fa=lines[i].find_first("=");
if(fa<0) continue;
string k=lines[i].substr(0,fa);
string val=lines[i].substr(fa+1,-1);
if(k!="" && val!="") d.set(k,val);
}//i
return d;
}//ini dict.
private string dictini(dictionary@ d)
{
string[] keys=d.get_keys();
if(keys.length()<1) return"";
string final="";
for(uint i=0;i<keys.length();i++)
{
string x;
double n;
if(d.get(keys[i],x)) final+=keys[i]+"="+x;
else if(d.get(keys[i],n)) final+=keys[i]+"="+n;
if(i<keys.length()-1) final+="\r\n";
}
return final;
}//dictini.
}//end.class